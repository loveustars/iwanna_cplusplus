// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messages.proto
// Protobuf C++ Version: 5.29.3

#ifndef messages_2eproto_2epb_2eh
#define messages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_messages_2eproto;
namespace game_backend {
class ClientToServer;
struct ClientToServerDefaultTypeInternal;
extern ClientToServerDefaultTypeInternal _ClientToServer_default_instance_;
class GameEvent;
struct GameEventDefaultTypeInternal;
extern GameEventDefaultTypeInternal _GameEvent_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class PlayerInput;
struct PlayerInputDefaultTypeInternal;
extern PlayerInputDefaultTypeInternal _PlayerInput_default_instance_;
class ServerToClient;
struct ServerToClientDefaultTypeInternal;
extern ServerToClientDefaultTypeInternal _ServerToClient_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace game_backend
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace game_backend {
enum GameEventType : int {
  UNKNOWN_EVENT = 0,
  RESET_GAME = 1,
  GameEventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GameEventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GameEventType_IsValid(int value);
extern const uint32_t GameEventType_internal_data_[];
constexpr GameEventType GameEventType_MIN = static_cast<GameEventType>(0);
constexpr GameEventType GameEventType_MAX = static_cast<GameEventType>(1);
constexpr int GameEventType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
GameEventType_descriptor();
template <typename T>
const std::string& GameEventType_Name(T value) {
  static_assert(std::is_same<T, GameEventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GameEventType_Name().");
  return GameEventType_Name(static_cast<GameEventType>(value));
}
template <>
inline const std::string& GameEventType_Name(GameEventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GameEventType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GameEventType_Parse(absl::string_view name, GameEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameEventType>(
      GameEventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector3* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector3));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector3(const Vector3& from) : Vector3(nullptr, from) {}
  inline Vector3(Vector3&& from) noexcept
      : Vector3(nullptr, std::move(from)) {}
  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
        &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Vector3& a, Vector3& b) { a.Swap(&b); }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector3& from) { Vector3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector3* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.Vector3"; }

 protected:
  explicit Vector3(::google::protobuf::Arena* arena);
  Vector3(::google::protobuf::Arena* arena, const Vector3& from);
  Vector3(::google::protobuf::Arena* arena, Vector3&& from) noexcept
      : Vector3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:game_backend.Vector3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector3& from_msg);
    float x_;
    float y_;
    float z_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PlayerInput final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.PlayerInput) */ {
 public:
  inline PlayerInput() : PlayerInput(nullptr) {}
  ~PlayerInput() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerInput* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerInput));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerInput(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerInput(const PlayerInput& from) : PlayerInput(nullptr, from) {}
  inline PlayerInput(PlayerInput&& from) noexcept
      : PlayerInput(nullptr, std::move(from)) {}
  inline PlayerInput& operator=(const PlayerInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInput& operator=(PlayerInput&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInput& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInput* internal_default_instance() {
    return reinterpret_cast<const PlayerInput*>(
        &_PlayerInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlayerInput& a, PlayerInput& b) { a.Swap(&b); }
  inline void Swap(PlayerInput* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInput* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerInput>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerInput& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerInput& from) { PlayerInput::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerInput* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.PlayerInput"; }

 protected:
  explicit PlayerInput(::google::protobuf::Arena* arena);
  PlayerInput(::google::protobuf::Arena* arena, const PlayerInput& from);
  PlayerInput(::google::protobuf::Arena* arena, PlayerInput&& from) noexcept
      : PlayerInput(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMoveForwardFieldNumber = 1,
    kMoveBackwardFieldNumber = 2,
    kMoveLeftFieldNumber = 3,
    kMoveRightFieldNumber = 4,
    kJumpPressedFieldNumber = 5,
  };
  // bool move_forward = 1;
  void clear_move_forward() ;
  bool move_forward() const;
  void set_move_forward(bool value);

  private:
  bool _internal_move_forward() const;
  void _internal_set_move_forward(bool value);

  public:
  // bool move_backward = 2;
  void clear_move_backward() ;
  bool move_backward() const;
  void set_move_backward(bool value);

  private:
  bool _internal_move_backward() const;
  void _internal_set_move_backward(bool value);

  public:
  // bool move_left = 3;
  void clear_move_left() ;
  bool move_left() const;
  void set_move_left(bool value);

  private:
  bool _internal_move_left() const;
  void _internal_set_move_left(bool value);

  public:
  // bool move_right = 4;
  void clear_move_right() ;
  bool move_right() const;
  void set_move_right(bool value);

  private:
  bool _internal_move_right() const;
  void _internal_set_move_right(bool value);

  public:
  // bool jump_pressed = 5;
  void clear_jump_pressed() ;
  bool jump_pressed() const;
  void set_jump_pressed(bool value);

  private:
  bool _internal_jump_pressed() const;
  void _internal_set_jump_pressed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:game_backend.PlayerInput)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerInput& from_msg);
    bool move_forward_;
    bool move_backward_;
    bool move_left_;
    bool move_right_;
    bool jump_pressed_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.GameEvent) */ {
 public:
  inline GameEvent() : GameEvent(nullptr) {}
  ~GameEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameEvent(const GameEvent& from) : GameEvent(nullptr, from) {}
  inline GameEvent(GameEvent&& from) noexcept
      : GameEvent(nullptr, std::move(from)) {}
  inline GameEvent& operator=(const GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEvent& operator=(GameEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEvent* internal_default_instance() {
    return reinterpret_cast<const GameEvent*>(
        &_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GameEvent& a, GameEvent& b) { a.Swap(&b); }
  inline void Swap(GameEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameEvent& from) { GameEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.GameEvent"; }

 protected:
  explicit GameEvent(::google::protobuf::Arena* arena);
  GameEvent(::google::protobuf::Arena* arena, const GameEvent& from);
  GameEvent(::google::protobuf::Arena* arena, GameEvent&& from) noexcept
      : GameEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
  };
  // .game_backend.GameEventType type = 1;
  void clear_type() ;
  ::game_backend::GameEventType type() const;
  void set_type(::game_backend::GameEventType value);

  private:
  ::game_backend::GameEventType _internal_type() const;
  void _internal_set_type(::game_backend::GameEventType value);

  public:
  // @@protoc_insertion_point(class_scope:game_backend.GameEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameEvent& from_msg);
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GameState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameState(const GameState& from) : GameState(nullptr, from) {}
  inline GameState(GameState&& from) noexcept
      : GameState(nullptr, std::move(from)) {}
  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
        &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GameState& a, GameState& b) { a.Swap(&b); }
  inline void Swap(GameState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameState& from) { GameState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.GameState"; }

 protected:
  explicit GameState(::google::protobuf::Arena* arena);
  GameState(::google::protobuf::Arena* arena, const GameState& from);
  GameState(::google::protobuf::Arena* arena, GameState&& from) noexcept
      : GameState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kIsInAirFieldNumber = 3,
    kHasWonFieldNumber = 4,
  };
  // .game_backend.Vector3 position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::game_backend::Vector3& position() const;
  PROTOBUF_NODISCARD ::game_backend::Vector3* release_position();
  ::game_backend::Vector3* mutable_position();
  void set_allocated_position(::game_backend::Vector3* value);
  void unsafe_arena_set_allocated_position(::game_backend::Vector3* value);
  ::game_backend::Vector3* unsafe_arena_release_position();

  private:
  const ::game_backend::Vector3& _internal_position() const;
  ::game_backend::Vector3* _internal_mutable_position();

  public:
  // .game_backend.Vector3 velocity = 2;
  bool has_velocity() const;
  void clear_velocity() ;
  const ::game_backend::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::game_backend::Vector3* release_velocity();
  ::game_backend::Vector3* mutable_velocity();
  void set_allocated_velocity(::game_backend::Vector3* value);
  void unsafe_arena_set_allocated_velocity(::game_backend::Vector3* value);
  ::game_backend::Vector3* unsafe_arena_release_velocity();

  private:
  const ::game_backend::Vector3& _internal_velocity() const;
  ::game_backend::Vector3* _internal_mutable_velocity();

  public:
  // bool is_in_air = 3;
  void clear_is_in_air() ;
  bool is_in_air() const;
  void set_is_in_air(bool value);

  private:
  bool _internal_is_in_air() const;
  void _internal_set_is_in_air(bool value);

  public:
  // bool has_won = 4;
  void clear_has_won() ;
  bool has_won() const;
  void set_has_won(bool value);

  private:
  bool _internal_has_won() const;
  void _internal_set_has_won(bool value);

  public:
  // @@protoc_insertion_point(class_scope:game_backend.GameState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::game_backend::Vector3* position_;
    ::game_backend::Vector3* velocity_;
    bool is_in_air_;
    bool has_won_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ClientToServer final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.ClientToServer) */ {
 public:
  inline ClientToServer() : ClientToServer(nullptr) {}
  ~ClientToServer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientToServer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientToServer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientToServer(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientToServer(const ClientToServer& from) : ClientToServer(nullptr, from) {}
  inline ClientToServer(ClientToServer&& from) noexcept
      : ClientToServer(nullptr, std::move(from)) {}
  inline ClientToServer& operator=(const ClientToServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientToServer& operator=(ClientToServer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientToServer& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kInput = 1,
    kEvent = 2,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const ClientToServer* internal_default_instance() {
    return reinterpret_cast<const ClientToServer*>(
        &_ClientToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ClientToServer& a, ClientToServer& b) { a.Swap(&b); }
  inline void Swap(ClientToServer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientToServer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientToServer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientToServer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientToServer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientToServer& from) { ClientToServer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientToServer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.ClientToServer"; }

 protected:
  explicit ClientToServer(::google::protobuf::Arena* arena);
  ClientToServer(::google::protobuf::Arena* arena, const ClientToServer& from);
  ClientToServer(::google::protobuf::Arena* arena, ClientToServer&& from) noexcept
      : ClientToServer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputFieldNumber = 1,
    kEventFieldNumber = 2,
  };
  // .game_backend.PlayerInput input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;

  public:
  void clear_input() ;
  const ::game_backend::PlayerInput& input() const;
  PROTOBUF_NODISCARD ::game_backend::PlayerInput* release_input();
  ::game_backend::PlayerInput* mutable_input();
  void set_allocated_input(::game_backend::PlayerInput* value);
  void unsafe_arena_set_allocated_input(::game_backend::PlayerInput* value);
  ::game_backend::PlayerInput* unsafe_arena_release_input();

  private:
  const ::game_backend::PlayerInput& _internal_input() const;
  ::game_backend::PlayerInput* _internal_mutable_input();

  public:
  // .game_backend.GameEvent event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;

  public:
  void clear_event() ;
  const ::game_backend::GameEvent& event() const;
  PROTOBUF_NODISCARD ::game_backend::GameEvent* release_event();
  ::game_backend::GameEvent* mutable_event();
  void set_allocated_event(::game_backend::GameEvent* value);
  void unsafe_arena_set_allocated_event(::game_backend::GameEvent* value);
  ::game_backend::GameEvent* unsafe_arena_release_event();

  private:
  const ::game_backend::GameEvent& _internal_event() const;
  ::game_backend::GameEvent* _internal_mutable_event();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:game_backend.ClientToServer)
 private:
  class _Internal;
  void set_has_input();
  void set_has_event();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientToServer& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::game_backend::PlayerInput* input_;
      ::game_backend::GameEvent* event_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ServerToClient final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:game_backend.ServerToClient) */ {
 public:
  inline ServerToClient() : ServerToClient(nullptr) {}
  ~ServerToClient() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ServerToClient* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ServerToClient));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerToClient(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerToClient(const ServerToClient& from) : ServerToClient(nullptr, from) {}
  inline ServerToClient(ServerToClient&& from) noexcept
      : ServerToClient(nullptr, std::move(from)) {}
  inline ServerToClient& operator=(const ServerToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToClient& operator=(ServerToClient&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerToClient& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kState = 1,
    kEvent = 2,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const ServerToClient* internal_default_instance() {
    return reinterpret_cast<const ServerToClient*>(
        &_ServerToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ServerToClient& a, ServerToClient& b) { a.Swap(&b); }
  inline void Swap(ServerToClient* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToClient* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerToClient* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ServerToClient>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerToClient& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerToClient& from) { ServerToClient::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ServerToClient* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "game_backend.ServerToClient"; }

 protected:
  explicit ServerToClient(::google::protobuf::Arena* arena);
  ServerToClient(::google::protobuf::Arena* arena, const ServerToClient& from);
  ServerToClient(::google::protobuf::Arena* arena, ServerToClient&& from) noexcept
      : ServerToClient(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStateFieldNumber = 1,
    kEventFieldNumber = 2,
  };
  // .game_backend.GameState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;

  public:
  void clear_state() ;
  const ::game_backend::GameState& state() const;
  PROTOBUF_NODISCARD ::game_backend::GameState* release_state();
  ::game_backend::GameState* mutable_state();
  void set_allocated_state(::game_backend::GameState* value);
  void unsafe_arena_set_allocated_state(::game_backend::GameState* value);
  ::game_backend::GameState* unsafe_arena_release_state();

  private:
  const ::game_backend::GameState& _internal_state() const;
  ::game_backend::GameState* _internal_mutable_state();

  public:
  // .game_backend.GameEvent event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;

  public:
  void clear_event() ;
  const ::game_backend::GameEvent& event() const;
  PROTOBUF_NODISCARD ::game_backend::GameEvent* release_event();
  ::game_backend::GameEvent* mutable_event();
  void set_allocated_event(::game_backend::GameEvent* value);
  void unsafe_arena_set_allocated_event(::game_backend::GameEvent* value);
  ::game_backend::GameEvent* unsafe_arena_release_event();

  private:
  const ::game_backend::GameEvent& _internal_event() const;
  ::game_backend::GameEvent* _internal_mutable_event();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:game_backend.ServerToClient)
 private:
  class _Internal;
  void set_has_state();
  void set_has_event();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerToClient& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::game_backend::GameState* state_;
      ::game_backend::GameEvent* event_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:game_backend.Vector3.x)
  return _internal_x();
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:game_backend.Vector3.x)
}
inline float Vector3::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector3::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector3::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:game_backend.Vector3.y)
  return _internal_y();
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:game_backend.Vector3.y)
}
inline float Vector3::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector3::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float z = 3;
inline void Vector3::clear_z() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:game_backend.Vector3.z)
  return _internal_z();
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:game_backend.Vector3.z)
}
inline float Vector3::_internal_z() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.z_;
}
inline void Vector3::_internal_set_z(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// PlayerInput

// bool move_forward = 1;
inline void PlayerInput::clear_move_forward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_forward_ = false;
}
inline bool PlayerInput::move_forward() const {
  // @@protoc_insertion_point(field_get:game_backend.PlayerInput.move_forward)
  return _internal_move_forward();
}
inline void PlayerInput::set_move_forward(bool value) {
  _internal_set_move_forward(value);
  // @@protoc_insertion_point(field_set:game_backend.PlayerInput.move_forward)
}
inline bool PlayerInput::_internal_move_forward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_forward_;
}
inline void PlayerInput::_internal_set_move_forward(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_forward_ = value;
}

// bool move_backward = 2;
inline void PlayerInput::clear_move_backward() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_backward_ = false;
}
inline bool PlayerInput::move_backward() const {
  // @@protoc_insertion_point(field_get:game_backend.PlayerInput.move_backward)
  return _internal_move_backward();
}
inline void PlayerInput::set_move_backward(bool value) {
  _internal_set_move_backward(value);
  // @@protoc_insertion_point(field_set:game_backend.PlayerInput.move_backward)
}
inline bool PlayerInput::_internal_move_backward() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_backward_;
}
inline void PlayerInput::_internal_set_move_backward(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_backward_ = value;
}

// bool move_left = 3;
inline void PlayerInput::clear_move_left() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_left_ = false;
}
inline bool PlayerInput::move_left() const {
  // @@protoc_insertion_point(field_get:game_backend.PlayerInput.move_left)
  return _internal_move_left();
}
inline void PlayerInput::set_move_left(bool value) {
  _internal_set_move_left(value);
  // @@protoc_insertion_point(field_set:game_backend.PlayerInput.move_left)
}
inline bool PlayerInput::_internal_move_left() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_left_;
}
inline void PlayerInput::_internal_set_move_left(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_left_ = value;
}

// bool move_right = 4;
inline void PlayerInput::clear_move_right() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_right_ = false;
}
inline bool PlayerInput::move_right() const {
  // @@protoc_insertion_point(field_get:game_backend.PlayerInput.move_right)
  return _internal_move_right();
}
inline void PlayerInput::set_move_right(bool value) {
  _internal_set_move_right(value);
  // @@protoc_insertion_point(field_set:game_backend.PlayerInput.move_right)
}
inline bool PlayerInput::_internal_move_right() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_right_;
}
inline void PlayerInput::_internal_set_move_right(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_right_ = value;
}

// bool jump_pressed = 5;
inline void PlayerInput::clear_jump_pressed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jump_pressed_ = false;
}
inline bool PlayerInput::jump_pressed() const {
  // @@protoc_insertion_point(field_get:game_backend.PlayerInput.jump_pressed)
  return _internal_jump_pressed();
}
inline void PlayerInput::set_jump_pressed(bool value) {
  _internal_set_jump_pressed(value);
  // @@protoc_insertion_point(field_set:game_backend.PlayerInput.jump_pressed)
}
inline bool PlayerInput::_internal_jump_pressed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jump_pressed_;
}
inline void PlayerInput::_internal_set_jump_pressed(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jump_pressed_ = value;
}

// -------------------------------------------------------------------

// GameState

// .game_backend.Vector3 position = 1;
inline bool GameState::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void GameState::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::game_backend::Vector3& GameState::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::game_backend::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::game_backend::Vector3&>(::game_backend::_Vector3_default_instance_);
}
inline const ::game_backend::Vector3& GameState::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.GameState.position)
  return _internal_position();
}
inline void GameState::unsafe_arena_set_allocated_position(::game_backend::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::game_backend::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.GameState.position)
}
inline ::game_backend::Vector3* GameState::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_backend::Vector3* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::game_backend::Vector3* GameState::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:game_backend.GameState.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::game_backend::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::game_backend::Vector3* GameState::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::game_backend::Vector3>(GetArena());
    _impl_.position_ = reinterpret_cast<::game_backend::Vector3*>(p);
  }
  return _impl_.position_;
}
inline ::game_backend::Vector3* GameState::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::game_backend::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:game_backend.GameState.position)
  return _msg;
}
inline void GameState::set_allocated_position(::game_backend::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::game_backend::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:game_backend.GameState.position)
}

// .game_backend.Vector3 velocity = 2;
inline bool GameState::has_velocity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.velocity_ != nullptr);
  return value;
}
inline void GameState::clear_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::game_backend::Vector3& GameState::_internal_velocity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::game_backend::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::game_backend::Vector3&>(::game_backend::_Vector3_default_instance_);
}
inline const ::game_backend::Vector3& GameState::velocity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.GameState.velocity)
  return _internal_velocity();
}
inline void GameState::unsafe_arena_set_allocated_velocity(::game_backend::Vector3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = reinterpret_cast<::game_backend::Vector3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.GameState.velocity)
}
inline ::game_backend::Vector3* GameState::release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::game_backend::Vector3* released = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::game_backend::Vector3* GameState::unsafe_arena_release_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:game_backend.GameState.velocity)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::game_backend::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::game_backend::Vector3* GameState::_internal_mutable_velocity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.velocity_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::game_backend::Vector3>(GetArena());
    _impl_.velocity_ = reinterpret_cast<::game_backend::Vector3*>(p);
  }
  return _impl_.velocity_;
}
inline ::game_backend::Vector3* GameState::mutable_velocity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::game_backend::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:game_backend.GameState.velocity)
  return _msg;
}
inline void GameState::set_allocated_velocity(::game_backend::Vector3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.velocity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.velocity_ = reinterpret_cast<::game_backend::Vector3*>(value);
  // @@protoc_insertion_point(field_set_allocated:game_backend.GameState.velocity)
}

// bool is_in_air = 3;
inline void GameState::clear_is_in_air() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_in_air_ = false;
}
inline bool GameState::is_in_air() const {
  // @@protoc_insertion_point(field_get:game_backend.GameState.is_in_air)
  return _internal_is_in_air();
}
inline void GameState::set_is_in_air(bool value) {
  _internal_set_is_in_air(value);
  // @@protoc_insertion_point(field_set:game_backend.GameState.is_in_air)
}
inline bool GameState::_internal_is_in_air() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_in_air_;
}
inline void GameState::_internal_set_is_in_air(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_in_air_ = value;
}

// bool has_won = 4;
inline void GameState::clear_has_won() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_won_ = false;
}
inline bool GameState::has_won() const {
  // @@protoc_insertion_point(field_get:game_backend.GameState.has_won)
  return _internal_has_won();
}
inline void GameState::set_has_won(bool value) {
  _internal_set_has_won(value);
  // @@protoc_insertion_point(field_set:game_backend.GameState.has_won)
}
inline bool GameState::_internal_has_won() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_won_;
}
inline void GameState::_internal_set_has_won(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_won_ = value;
}

// -------------------------------------------------------------------

// GameEvent

// .game_backend.GameEventType type = 1;
inline void GameEvent::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::game_backend::GameEventType GameEvent::type() const {
  // @@protoc_insertion_point(field_get:game_backend.GameEvent.type)
  return _internal_type();
}
inline void GameEvent::set_type(::game_backend::GameEventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:game_backend.GameEvent.type)
}
inline ::game_backend::GameEventType GameEvent::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::game_backend::GameEventType>(_impl_.type_);
}
inline void GameEvent::_internal_set_type(::game_backend::GameEventType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// ClientToServer

// .game_backend.PlayerInput input = 1;
inline bool ClientToServer::has_input() const {
  return payload_case() == kInput;
}
inline bool ClientToServer::_internal_has_input() const {
  return payload_case() == kInput;
}
inline void ClientToServer::set_has_input() {
  _impl_._oneof_case_[0] = kInput;
}
inline void ClientToServer::clear_input() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kInput) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.input_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.input_);
    }
    clear_has_payload();
  }
}
inline ::game_backend::PlayerInput* ClientToServer::release_input() {
  // @@protoc_insertion_point(field_release:game_backend.ClientToServer.input)
  if (payload_case() == kInput) {
    clear_has_payload();
    auto* temp = _impl_.payload_.input_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game_backend::PlayerInput& ClientToServer::_internal_input() const {
  return payload_case() == kInput ? *_impl_.payload_.input_ : reinterpret_cast<::game_backend::PlayerInput&>(::game_backend::_PlayerInput_default_instance_);
}
inline const ::game_backend::PlayerInput& ClientToServer::input() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.ClientToServer.input)
  return _internal_input();
}
inline ::game_backend::PlayerInput* ClientToServer::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game_backend.ClientToServer.input)
  if (payload_case() == kInput) {
    clear_has_payload();
    auto* temp = _impl_.payload_.input_;
    _impl_.payload_.input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientToServer::unsafe_arena_set_allocated_input(::game_backend::PlayerInput* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_input();
    _impl_.payload_.input_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.ClientToServer.input)
}
inline ::game_backend::PlayerInput* ClientToServer::_internal_mutable_input() {
  if (payload_case() != kInput) {
    clear_payload();
    set_has_input();
    _impl_.payload_.input_ =
        ::google::protobuf::Message::DefaultConstruct<::game_backend::PlayerInput>(GetArena());
  }
  return _impl_.payload_.input_;
}
inline ::game_backend::PlayerInput* ClientToServer::mutable_input() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::game_backend::PlayerInput* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:game_backend.ClientToServer.input)
  return _msg;
}

// .game_backend.GameEvent event = 2;
inline bool ClientToServer::has_event() const {
  return payload_case() == kEvent;
}
inline bool ClientToServer::_internal_has_event() const {
  return payload_case() == kEvent;
}
inline void ClientToServer::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline void ClientToServer::clear_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.event_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.event_);
    }
    clear_has_payload();
  }
}
inline ::game_backend::GameEvent* ClientToServer::release_event() {
  // @@protoc_insertion_point(field_release:game_backend.ClientToServer.event)
  if (payload_case() == kEvent) {
    clear_has_payload();
    auto* temp = _impl_.payload_.event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game_backend::GameEvent& ClientToServer::_internal_event() const {
  return payload_case() == kEvent ? *_impl_.payload_.event_ : reinterpret_cast<::game_backend::GameEvent&>(::game_backend::_GameEvent_default_instance_);
}
inline const ::game_backend::GameEvent& ClientToServer::event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.ClientToServer.event)
  return _internal_event();
}
inline ::game_backend::GameEvent* ClientToServer::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game_backend.ClientToServer.event)
  if (payload_case() == kEvent) {
    clear_has_payload();
    auto* temp = _impl_.payload_.event_;
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientToServer::unsafe_arena_set_allocated_event(::game_backend::GameEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_event();
    _impl_.payload_.event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.ClientToServer.event)
}
inline ::game_backend::GameEvent* ClientToServer::_internal_mutable_event() {
  if (payload_case() != kEvent) {
    clear_payload();
    set_has_event();
    _impl_.payload_.event_ =
        ::google::protobuf::Message::DefaultConstruct<::game_backend::GameEvent>(GetArena());
  }
  return _impl_.payload_.event_;
}
inline ::game_backend::GameEvent* ClientToServer::mutable_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::game_backend::GameEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:game_backend.ClientToServer.event)
  return _msg;
}

inline bool ClientToServer::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ClientToServer::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ClientToServer::PayloadCase ClientToServer::payload_case() const {
  return ClientToServer::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerToClient

// .game_backend.GameState state = 1;
inline bool ServerToClient::has_state() const {
  return payload_case() == kState;
}
inline bool ServerToClient::_internal_has_state() const {
  return payload_case() == kState;
}
inline void ServerToClient::set_has_state() {
  _impl_._oneof_case_[0] = kState;
}
inline void ServerToClient::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kState) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.state_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.state_);
    }
    clear_has_payload();
  }
}
inline ::game_backend::GameState* ServerToClient::release_state() {
  // @@protoc_insertion_point(field_release:game_backend.ServerToClient.state)
  if (payload_case() == kState) {
    clear_has_payload();
    auto* temp = _impl_.payload_.state_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game_backend::GameState& ServerToClient::_internal_state() const {
  return payload_case() == kState ? *_impl_.payload_.state_ : reinterpret_cast<::game_backend::GameState&>(::game_backend::_GameState_default_instance_);
}
inline const ::game_backend::GameState& ServerToClient::state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.ServerToClient.state)
  return _internal_state();
}
inline ::game_backend::GameState* ServerToClient::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game_backend.ServerToClient.state)
  if (payload_case() == kState) {
    clear_has_payload();
    auto* temp = _impl_.payload_.state_;
    _impl_.payload_.state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToClient::unsafe_arena_set_allocated_state(::game_backend::GameState* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_state();
    _impl_.payload_.state_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.ServerToClient.state)
}
inline ::game_backend::GameState* ServerToClient::_internal_mutable_state() {
  if (payload_case() != kState) {
    clear_payload();
    set_has_state();
    _impl_.payload_.state_ =
        ::google::protobuf::Message::DefaultConstruct<::game_backend::GameState>(GetArena());
  }
  return _impl_.payload_.state_;
}
inline ::game_backend::GameState* ServerToClient::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::game_backend::GameState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:game_backend.ServerToClient.state)
  return _msg;
}

// .game_backend.GameEvent event = 2;
inline bool ServerToClient::has_event() const {
  return payload_case() == kEvent;
}
inline bool ServerToClient::_internal_has_event() const {
  return payload_case() == kEvent;
}
inline void ServerToClient::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline void ServerToClient::clear_event() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.event_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.event_);
    }
    clear_has_payload();
  }
}
inline ::game_backend::GameEvent* ServerToClient::release_event() {
  // @@protoc_insertion_point(field_release:game_backend.ServerToClient.event)
  if (payload_case() == kEvent) {
    clear_has_payload();
    auto* temp = _impl_.payload_.event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game_backend::GameEvent& ServerToClient::_internal_event() const {
  return payload_case() == kEvent ? *_impl_.payload_.event_ : reinterpret_cast<::game_backend::GameEvent&>(::game_backend::_GameEvent_default_instance_);
}
inline const ::game_backend::GameEvent& ServerToClient::event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:game_backend.ServerToClient.event)
  return _internal_event();
}
inline ::game_backend::GameEvent* ServerToClient::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game_backend.ServerToClient.event)
  if (payload_case() == kEvent) {
    clear_has_payload();
    auto* temp = _impl_.payload_.event_;
    _impl_.payload_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToClient::unsafe_arena_set_allocated_event(::game_backend::GameEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_event();
    _impl_.payload_.event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game_backend.ServerToClient.event)
}
inline ::game_backend::GameEvent* ServerToClient::_internal_mutable_event() {
  if (payload_case() != kEvent) {
    clear_payload();
    set_has_event();
    _impl_.payload_.event_ =
        ::google::protobuf::Message::DefaultConstruct<::game_backend::GameEvent>(GetArena());
  }
  return _impl_.payload_.event_;
}
inline ::game_backend::GameEvent* ServerToClient::mutable_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::game_backend::GameEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:game_backend.ServerToClient.event)
  return _msg;
}

inline bool ServerToClient::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ServerToClient::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ServerToClient::PayloadCase ServerToClient::payload_case() const {
  return ServerToClient::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace game_backend


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::game_backend::GameEventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::game_backend::GameEventType>() {
  return ::game_backend::GameEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // messages_2eproto_2epb_2eh
