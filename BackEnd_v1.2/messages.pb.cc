// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: messages.proto
// Protobuf C++ Version: 5.29.3

#include "messages.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace game_backend {

inline constexpr Vector3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector3::Vector3(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;

inline constexpr PlayerInput::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : move_forward_{false},
        move_backward_{false},
        move_left_{false},
        move_right_{false},
        jump_pressed_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerInput::PlayerInput(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInputDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInputDefaultTypeInternal() {}
  union {
    PlayerInput _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInputDefaultTypeInternal _PlayerInput_default_instance_;

inline constexpr GameEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_{static_cast< ::game_backend::GameEventType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GameEvent::GameEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEventDefaultTypeInternal() {}
  union {
    GameEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEventDefaultTypeInternal _GameEvent_default_instance_;

inline constexpr GameState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        velocity_{nullptr},
        is_in_air_{false},
        has_won_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GameState::GameState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStateDefaultTypeInternal() {}
  union {
    GameState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStateDefaultTypeInternal _GameState_default_instance_;

inline constexpr ClientToServer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ClientToServer::ClientToServer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ClientToServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientToServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientToServerDefaultTypeInternal() {}
  union {
    ClientToServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientToServerDefaultTypeInternal _ClientToServer_default_instance_;

inline constexpr ServerToClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ServerToClient::ServerToClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ServerToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerToClientDefaultTypeInternal() {}
  union {
    ServerToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerToClientDefaultTypeInternal _ServerToClient_default_instance_;
}  // namespace game_backend
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_messages_2eproto = nullptr;
const ::uint32_t
    TableStruct_messages_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::game_backend::Vector3, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::game_backend::Vector3, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::game_backend::Vector3, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::game_backend::Vector3, _impl_.z_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _impl_.move_forward_),
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _impl_.move_backward_),
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _impl_.move_left_),
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _impl_.move_right_),
        PROTOBUF_FIELD_OFFSET(::game_backend::PlayerInput, _impl_.jump_pressed_),
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _impl_.velocity_),
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _impl_.is_in_air_),
        PROTOBUF_FIELD_OFFSET(::game_backend::GameState, _impl_.has_won_),
        0,
        1,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::game_backend::GameEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::game_backend::GameEvent, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::game_backend::ClientToServer, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::game_backend::ClientToServer, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::game_backend::ClientToServer, _impl_.payload_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::game_backend::ServerToClient, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::game_backend::ServerToClient, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::game_backend::ServerToClient, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::game_backend::Vector3)},
        {11, -1, -1, sizeof(::game_backend::PlayerInput)},
        {24, 36, -1, sizeof(::game_backend::GameState)},
        {40, -1, -1, sizeof(::game_backend::GameEvent)},
        {49, -1, -1, sizeof(::game_backend::ClientToServer)},
        {60, -1, -1, sizeof(::game_backend::ServerToClient)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::game_backend::_Vector3_default_instance_._instance,
    &::game_backend::_PlayerInput_default_instance_._instance,
    &::game_backend::_GameState_default_instance_._instance,
    &::game_backend::_GameEvent_default_instance_._instance,
    &::game_backend::_ClientToServer_default_instance_._instance,
    &::game_backend::_ServerToClient_default_instance_._instance,
};
const char descriptor_table_protodef_messages_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016messages.proto\022\014game_backend\"*\n\007Vector"
    "3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"w\n\013Pl"
    "ayerInput\022\024\n\014move_forward\030\001 \001(\010\022\025\n\rmove_"
    "backward\030\002 \001(\010\022\021\n\tmove_left\030\003 \001(\010\022\022\n\nmov"
    "e_right\030\004 \001(\010\022\024\n\014jump_pressed\030\005 \001(\010\"\201\001\n\t"
    "GameState\022\'\n\010position\030\001 \001(\0132\025.game_backe"
    "nd.Vector3\022\'\n\010velocity\030\002 \001(\0132\025.game_back"
    "end.Vector3\022\021\n\tis_in_air\030\003 \001(\010\022\017\n\007has_wo"
    "n\030\004 \001(\010\"6\n\tGameEvent\022)\n\004type\030\001 \001(\0162\033.gam"
    "e_backend.GameEventType\"q\n\016ClientToServe"
    "r\022*\n\005input\030\001 \001(\0132\031.game_backend.PlayerIn"
    "putH\000\022(\n\005event\030\002 \001(\0132\027.game_backend.Game"
    "EventH\000B\t\n\007payload\"o\n\016ServerToClient\022(\n\005"
    "state\030\001 \001(\0132\027.game_backend.GameStateH\000\022("
    "\n\005event\030\002 \001(\0132\027.game_backend.GameEventH\000"
    "B\t\n\007payload*2\n\rGameEventType\022\021\n\rUNKNOWN_"
    "EVENT\020\000\022\016\n\nRESET_GAME\020\001b\006proto3"
};
static ::absl::once_flag descriptor_table_messages_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_messages_2eproto = {
    false,
    false,
    671,
    descriptor_table_protodef_messages_2eproto,
    "messages.proto",
    &descriptor_table_messages_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_messages_2eproto::offsets,
    file_level_enum_descriptors_messages_2eproto,
    file_level_service_descriptors_messages_2eproto,
};
namespace game_backend {
const ::google::protobuf::EnumDescriptor* GameEventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GameEventType_internal_data_[] = {
    131072u, 0u, };
bool GameEventType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.Vector3)
}
Vector3::Vector3(
    ::google::protobuf::Arena* arena, const Vector3& from)
    : Vector3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:game_backend.Vector3)
  SharedDtor(*this);
}
inline void Vector3::SharedDtor(MessageLite& self) {
  Vector3& this_ = static_cast<Vector3&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Vector3::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Vector3(arena);
}
constexpr auto Vector3::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Vector3),
                                            alignof(Vector3));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Vector3::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Vector3_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Vector3::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Vector3>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Vector3::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Vector3>(), &Vector3::ByteSizeLong,
            &Vector3::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Vector3, _impl_._cached_size_),
        false,
    },
    &Vector3::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Vector3::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::Vector3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.Vector3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Vector3::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Vector3& this_ = static_cast<const Vector3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Vector3::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Vector3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.Vector3)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float x = 1;
          if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_x(), target);
          }

          // float y = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_y(), target);
          }

          // float z = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.Vector3)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Vector3::ByteSizeLong(const MessageLite& base) {
          const Vector3& this_ = static_cast<const Vector3&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Vector3::ByteSizeLong() const {
          const Vector3& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.Vector3)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float x = 1;
            if (::absl::bit_cast<::uint32_t>(this_._internal_x()) != 0) {
              total_size += 5;
            }
            // float y = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_y()) != 0) {
              total_size += 5;
            }
            // float z = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_z()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Vector3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.Vector3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_x()) != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_y()) != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_z()) != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Vector3::InternalSwap(Vector3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerInput::_Internal {
 public:
};

PlayerInput::PlayerInput(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.PlayerInput)
}
PlayerInput::PlayerInput(
    ::google::protobuf::Arena* arena, const PlayerInput& from)
    : PlayerInput(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PlayerInput::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlayerInput::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, move_forward_),
           0,
           offsetof(Impl_, jump_pressed_) -
               offsetof(Impl_, move_forward_) +
               sizeof(Impl_::jump_pressed_));
}
PlayerInput::~PlayerInput() {
  // @@protoc_insertion_point(destructor:game_backend.PlayerInput)
  SharedDtor(*this);
}
inline void PlayerInput::SharedDtor(MessageLite& self) {
  PlayerInput& this_ = static_cast<PlayerInput&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PlayerInput::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlayerInput(arena);
}
constexpr auto PlayerInput::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PlayerInput),
                                            alignof(PlayerInput));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlayerInput::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlayerInput_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlayerInput::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlayerInput>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlayerInput::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlayerInput>(), &PlayerInput::ByteSizeLong,
            &PlayerInput::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_._cached_size_),
        false,
    },
    &PlayerInput::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlayerInput::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> PlayerInput::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::PlayerInput>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool move_forward = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerInput, _impl_.move_forward_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_forward_)}},
    // bool move_backward = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerInput, _impl_.move_backward_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_backward_)}},
    // bool move_left = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerInput, _impl_.move_left_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_left_)}},
    // bool move_right = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerInput, _impl_.move_right_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_right_)}},
    // bool jump_pressed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PlayerInput, _impl_.jump_pressed_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.jump_pressed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool move_forward = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_forward_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool move_backward = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_backward_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool move_left = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_left_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool move_right = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_right_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool jump_pressed = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.jump_pressed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PlayerInput::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.PlayerInput)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.move_forward_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.jump_pressed_) -
      reinterpret_cast<char*>(&_impl_.move_forward_)) + sizeof(_impl_.jump_pressed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerInput::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerInput& this_ = static_cast<const PlayerInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerInput::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.PlayerInput)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool move_forward = 1;
          if (this_._internal_move_forward() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_move_forward(), target);
          }

          // bool move_backward = 2;
          if (this_._internal_move_backward() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_move_backward(), target);
          }

          // bool move_left = 3;
          if (this_._internal_move_left() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_move_left(), target);
          }

          // bool move_right = 4;
          if (this_._internal_move_right() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_move_right(), target);
          }

          // bool jump_pressed = 5;
          if (this_._internal_jump_pressed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_jump_pressed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.PlayerInput)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerInput::ByteSizeLong(const MessageLite& base) {
          const PlayerInput& this_ = static_cast<const PlayerInput&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerInput::ByteSizeLong() const {
          const PlayerInput& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.PlayerInput)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool move_forward = 1;
            if (this_._internal_move_forward() != 0) {
              total_size += 2;
            }
            // bool move_backward = 2;
            if (this_._internal_move_backward() != 0) {
              total_size += 2;
            }
            // bool move_left = 3;
            if (this_._internal_move_left() != 0) {
              total_size += 2;
            }
            // bool move_right = 4;
            if (this_._internal_move_right() != 0) {
              total_size += 2;
            }
            // bool jump_pressed = 5;
            if (this_._internal_jump_pressed() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerInput::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerInput*>(&to_msg);
  auto& from = static_cast<const PlayerInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.PlayerInput)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_move_forward() != 0) {
    _this->_impl_.move_forward_ = from._impl_.move_forward_;
  }
  if (from._internal_move_backward() != 0) {
    _this->_impl_.move_backward_ = from._impl_.move_backward_;
  }
  if (from._internal_move_left() != 0) {
    _this->_impl_.move_left_ = from._impl_.move_left_;
  }
  if (from._internal_move_right() != 0) {
    _this->_impl_.move_right_ = from._impl_.move_right_;
  }
  if (from._internal_jump_pressed() != 0) {
    _this->_impl_.jump_pressed_ = from._impl_.jump_pressed_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInput::CopyFrom(const PlayerInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.PlayerInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerInput::InternalSwap(PlayerInput* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.jump_pressed_)
      + sizeof(PlayerInput::_impl_.jump_pressed_)
      - PROTOBUF_FIELD_OFFSET(PlayerInput, _impl_.move_forward_)>(
          reinterpret_cast<char*>(&_impl_.move_forward_),
          reinterpret_cast<char*>(&other->_impl_.move_forward_));
}

::google::protobuf::Metadata PlayerInput::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GameState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GameState, _impl_._has_bits_);
};

GameState::GameState(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.GameState)
}
inline PROTOBUF_NDEBUG_INLINE GameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::game_backend::GameState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GameState::GameState(
    ::google::protobuf::Arena* arena,
    const GameState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GameState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::game_backend::Vector3>(
                              arena, *from._impl_.position_)
                        : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::game_backend::Vector3>(
                              arena, *from._impl_.velocity_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_in_air_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_in_air_),
           offsetof(Impl_, has_won_) -
               offsetof(Impl_, is_in_air_) +
               sizeof(Impl_::has_won_));

  // @@protoc_insertion_point(copy_constructor:game_backend.GameState)
}
inline PROTOBUF_NDEBUG_INLINE GameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, has_won_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::has_won_));
}
GameState::~GameState() {
  // @@protoc_insertion_point(destructor:game_backend.GameState)
  SharedDtor(*this);
}
inline void GameState::SharedDtor(MessageLite& self) {
  GameState& this_ = static_cast<GameState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.position_;
  delete this_._impl_.velocity_;
  this_._impl_.~Impl_();
}

inline void* GameState::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameState(arena);
}
constexpr auto GameState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GameState),
                                            alignof(GameState));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameState::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameState_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameState::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameState::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameState>(), &GameState::ByteSizeLong,
            &GameState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameState, _impl_._cached_size_),
        false,
    },
    &GameState::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GameState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameState, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::GameState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool has_won = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameState, _impl_.has_won_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.has_won_)}},
    // .game_backend.Vector3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.position_)}},
    // .game_backend.Vector3 velocity = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GameState, _impl_.velocity_)}},
    // bool is_in_air = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameState, _impl_.is_in_air_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GameState, _impl_.is_in_air_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .game_backend.Vector3 position = 1;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .game_backend.Vector3 velocity = 2;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_in_air = 3;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.is_in_air_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool has_won = 4;
    {PROTOBUF_FIELD_OFFSET(GameState, _impl_.has_won_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::game_backend::Vector3>()},
    {::_pbi::TcParser::GetTable<::game_backend::Vector3>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.GameState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  ::memset(&_impl_.is_in_air_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_won_) -
      reinterpret_cast<char*>(&_impl_.is_in_air_)) + sizeof(_impl_.has_won_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameState::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameState& this_ = static_cast<const GameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameState::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.GameState)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .game_backend.Vector3 position = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.position_, this_._impl_.position_->GetCachedSize(), target,
                stream);
          }

          // .game_backend.Vector3 velocity = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.velocity_, this_._impl_.velocity_->GetCachedSize(), target,
                stream);
          }

          // bool is_in_air = 3;
          if (this_._internal_is_in_air() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_is_in_air(), target);
          }

          // bool has_won = 4;
          if (this_._internal_has_won() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_has_won(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.GameState)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameState::ByteSizeLong(const MessageLite& base) {
          const GameState& this_ = static_cast<const GameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameState::ByteSizeLong() const {
          const GameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.GameState)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .game_backend.Vector3 position = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.position_);
            }
            // .game_backend.Vector3 velocity = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.velocity_);
            }
          }
           {
            // bool is_in_air = 3;
            if (this_._internal_is_in_air() != 0) {
              total_size += 2;
            }
            // bool has_won = 4;
            if (this_._internal_has_won() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameState*>(&to_msg);
  auto& from = static_cast<const GameState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.GameState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.position_ != nullptr);
      if (_this->_impl_.position_ == nullptr) {
        _this->_impl_.position_ =
            ::google::protobuf::Message::CopyConstruct<::game_backend::Vector3>(arena, *from._impl_.position_);
      } else {
        _this->_impl_.position_->MergeFrom(*from._impl_.position_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.velocity_ != nullptr);
      if (_this->_impl_.velocity_ == nullptr) {
        _this->_impl_.velocity_ =
            ::google::protobuf::Message::CopyConstruct<::game_backend::Vector3>(arena, *from._impl_.velocity_);
      } else {
        _this->_impl_.velocity_->MergeFrom(*from._impl_.velocity_);
      }
    }
  }
  if (from._internal_is_in_air() != 0) {
    _this->_impl_.is_in_air_ = from._impl_.is_in_air_;
  }
  if (from._internal_has_won() != 0) {
    _this->_impl_.has_won_ = from._impl_.has_won_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameState::InternalSwap(GameState* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameState, _impl_.has_won_)
      + sizeof(GameState::_impl_.has_won_)
      - PROTOBUF_FIELD_OFFSET(GameState, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GameEvent::_Internal {
 public:
};

GameEvent::GameEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.GameEvent)
}
GameEvent::GameEvent(
    ::google::protobuf::Arena* arena, const GameEvent& from)
    : GameEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GameEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GameEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:game_backend.GameEvent)
  SharedDtor(*this);
}
inline void GameEvent::SharedDtor(MessageLite& self) {
  GameEvent& this_ = static_cast<GameEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GameEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GameEvent(arena);
}
constexpr auto GameEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GameEvent),
                                            alignof(GameEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GameEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GameEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GameEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GameEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GameEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GameEvent>(), &GameEvent::ByteSizeLong,
            &GameEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GameEvent, _impl_._cached_size_),
        false,
    },
    &GameEvent::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GameEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> GameEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::GameEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .game_backend.GameEventType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameEvent, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .game_backend.GameEventType type = 1;
    {PROTOBUF_FIELD_OFFSET(GameEvent, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.GameEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GameEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GameEvent& this_ = static_cast<const GameEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GameEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GameEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.GameEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .game_backend.GameEventType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.GameEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GameEvent::ByteSizeLong(const MessageLite& base) {
          const GameEvent& this_ = static_cast<const GameEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GameEvent::ByteSizeLong() const {
          const GameEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.GameEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .game_backend.GameEventType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GameEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GameEvent*>(&to_msg);
  auto& from = static_cast<const GameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.GameEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GameEvent::InternalSwap(GameEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata GameEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ClientToServer::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::game_backend::ClientToServer, _impl_._oneof_case_);
};

void ClientToServer::set_allocated_input(::game_backend::PlayerInput* input) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (input) {
    ::google::protobuf::Arena* submessage_arena = input->GetArena();
    if (message_arena != submessage_arena) {
      input = ::google::protobuf::internal::GetOwnedMessage(message_arena, input, submessage_arena);
    }
    set_has_input();
    _impl_.payload_.input_ = input;
  }
  // @@protoc_insertion_point(field_set_allocated:game_backend.ClientToServer.input)
}
void ClientToServer::set_allocated_event(::game_backend::GameEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = event->GetArena();
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:game_backend.ClientToServer.event)
}
ClientToServer::ClientToServer(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.ClientToServer)
}
inline PROTOBUF_NDEBUG_INLINE ClientToServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::game_backend::ClientToServer& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ClientToServer::ClientToServer(
    ::google::protobuf::Arena* arena,
    const ClientToServer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ClientToServer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kInput:
        _impl_.payload_.input_ = ::google::protobuf::Message::CopyConstruct<::game_backend::PlayerInput>(arena, *from._impl_.payload_.input_);
        break;
      case kEvent:
        _impl_.payload_.event_ = ::google::protobuf::Message::CopyConstruct<::game_backend::GameEvent>(arena, *from._impl_.payload_.event_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:game_backend.ClientToServer)
}
inline PROTOBUF_NDEBUG_INLINE ClientToServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ClientToServer::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ClientToServer::~ClientToServer() {
  // @@protoc_insertion_point(destructor:game_backend.ClientToServer)
  SharedDtor(*this);
}
inline void ClientToServer::SharedDtor(MessageLite& self) {
  ClientToServer& this_ = static_cast<ClientToServer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void ClientToServer::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:game_backend.ClientToServer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kInput: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.input_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.input_);
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.event_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.event_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* ClientToServer::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ClientToServer(arena);
}
constexpr auto ClientToServer::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ClientToServer),
                                            alignof(ClientToServer));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ClientToServer::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ClientToServer_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ClientToServer::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ClientToServer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ClientToServer::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ClientToServer>(), &ClientToServer::ByteSizeLong,
            &ClientToServer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ClientToServer, _impl_._cached_size_),
        false,
    },
    &ClientToServer::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ClientToServer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> ClientToServer::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::ClientToServer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .game_backend.PlayerInput input = 1;
    {PROTOBUF_FIELD_OFFSET(ClientToServer, _impl_.payload_.input_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .game_backend.GameEvent event = 2;
    {PROTOBUF_FIELD_OFFSET(ClientToServer, _impl_.payload_.event_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::game_backend::PlayerInput>()},
    {::_pbi::TcParser::GetTable<::game_backend::GameEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ClientToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.ClientToServer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ClientToServer::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ClientToServer& this_ = static_cast<const ClientToServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ClientToServer::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ClientToServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.ClientToServer)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            case kInput: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.payload_.input_, this_._impl_.payload_.input_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEvent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.payload_.event_, this_._impl_.payload_.event_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.ClientToServer)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ClientToServer::ByteSizeLong(const MessageLite& base) {
          const ClientToServer& this_ = static_cast<const ClientToServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ClientToServer::ByteSizeLong() const {
          const ClientToServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.ClientToServer)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            // .game_backend.PlayerInput input = 1;
            case kInput: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.input_);
              break;
            }
            // .game_backend.GameEvent event = 2;
            case kEvent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.event_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ClientToServer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ClientToServer*>(&to_msg);
  auto& from = static_cast<const ClientToServer&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.ClientToServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kInput: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.input_ =
              ::google::protobuf::Message::CopyConstruct<::game_backend::PlayerInput>(arena, *from._impl_.payload_.input_);
        } else {
          _this->_impl_.payload_.input_->MergeFrom(from._internal_input());
        }
        break;
      }
      case kEvent: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.event_ =
              ::google::protobuf::Message::CopyConstruct<::game_backend::GameEvent>(arena, *from._impl_.payload_.event_);
        } else {
          _this->_impl_.payload_.event_->MergeFrom(from._internal_event());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ClientToServer::CopyFrom(const ClientToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.ClientToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ClientToServer::InternalSwap(ClientToServer* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ClientToServer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServerToClient::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::game_backend::ServerToClient, _impl_._oneof_case_);
};

void ServerToClient::set_allocated_state(::game_backend::GameState* state) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (state) {
    ::google::protobuf::Arena* submessage_arena = state->GetArena();
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(message_arena, state, submessage_arena);
    }
    set_has_state();
    _impl_.payload_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:game_backend.ServerToClient.state)
}
void ServerToClient::set_allocated_event(::game_backend::GameEvent* event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = event->GetArena();
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.payload_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:game_backend.ServerToClient.event)
}
ServerToClient::ServerToClient(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:game_backend.ServerToClient)
}
inline PROTOBUF_NDEBUG_INLINE ServerToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::game_backend::ServerToClient& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ServerToClient::ServerToClient(
    ::google::protobuf::Arena* arena,
    const ServerToClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ServerToClient* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kState:
        _impl_.payload_.state_ = ::google::protobuf::Message::CopyConstruct<::game_backend::GameState>(arena, *from._impl_.payload_.state_);
        break;
      case kEvent:
        _impl_.payload_.event_ = ::google::protobuf::Message::CopyConstruct<::game_backend::GameEvent>(arena, *from._impl_.payload_.event_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:game_backend.ServerToClient)
}
inline PROTOBUF_NDEBUG_INLINE ServerToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ServerToClient::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ServerToClient::~ServerToClient() {
  // @@protoc_insertion_point(destructor:game_backend.ServerToClient)
  SharedDtor(*this);
}
inline void ServerToClient::SharedDtor(MessageLite& self) {
  ServerToClient& this_ = static_cast<ServerToClient&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void ServerToClient::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:game_backend.ServerToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kState: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.state_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.state_);
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.event_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.event_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* ServerToClient::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ServerToClient(arena);
}
constexpr auto ServerToClient::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ServerToClient),
                                            alignof(ServerToClient));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ServerToClient::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ServerToClient_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ServerToClient::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ServerToClient>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ServerToClient::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ServerToClient>(), &ServerToClient::ByteSizeLong,
            &ServerToClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ServerToClient, _impl_._cached_size_),
        false,
    },
    &ServerToClient::kDescriptorMethods,
    &descriptor_table_messages_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ServerToClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> ServerToClient::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::game_backend::ServerToClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .game_backend.GameState state = 1;
    {PROTOBUF_FIELD_OFFSET(ServerToClient, _impl_.payload_.state_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .game_backend.GameEvent event = 2;
    {PROTOBUF_FIELD_OFFSET(ServerToClient, _impl_.payload_.event_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::game_backend::GameState>()},
    {::_pbi::TcParser::GetTable<::game_backend::GameEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ServerToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:game_backend.ServerToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ServerToClient::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ServerToClient& this_ = static_cast<const ServerToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ServerToClient::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ServerToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:game_backend.ServerToClient)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            case kState: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  1, *this_._impl_.payload_.state_, this_._impl_.payload_.state_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEvent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  2, *this_._impl_.payload_.event_, this_._impl_.payload_.event_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:game_backend.ServerToClient)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ServerToClient::ByteSizeLong(const MessageLite& base) {
          const ServerToClient& this_ = static_cast<const ServerToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ServerToClient::ByteSizeLong() const {
          const ServerToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:game_backend.ServerToClient)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            // .game_backend.GameState state = 1;
            case kState: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.state_);
              break;
            }
            // .game_backend.GameEvent event = 2;
            case kEvent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.event_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ServerToClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServerToClient*>(&to_msg);
  auto& from = static_cast<const ServerToClient&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:game_backend.ServerToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kState: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.state_ =
              ::google::protobuf::Message::CopyConstruct<::game_backend::GameState>(arena, *from._impl_.payload_.state_);
        } else {
          _this->_impl_.payload_.state_->MergeFrom(from._internal_state());
        }
        break;
      }
      case kEvent: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.event_ =
              ::google::protobuf::Message::CopyConstruct<::game_backend::GameEvent>(arena, *from._impl_.payload_.event_);
        } else {
          _this->_impl_.payload_.event_->MergeFrom(from._internal_event());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServerToClient::CopyFrom(const ServerToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game_backend.ServerToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServerToClient::InternalSwap(ServerToClient* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ServerToClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace game_backend
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_messages_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
