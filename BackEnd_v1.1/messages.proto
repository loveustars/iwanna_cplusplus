// messages.proto
syntax = "proto3"; // 指定使用 proto3 语法

package game_backend; // 可选: 使用包名防止命名冲突

// 基础 3D 向量结构
message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

// 代表从客户端 (Unity) 发送过来的输入状态
message PlayerInput {
  bool move_forward = 1;  // 是否向前移动
  bool move_backward = 2; // 是否向后移动
  bool move_left = 3;     // 是否向左移动
  bool move_right = 4;    // 是否向右移动
  bool jump_pressed = 5; // 本帧是否有跳跃意图 (按下跳跃键)
}

// 代表从服务器 (C++) 发送给客户端的游戏状态
message GameState {
  Vector3 position = 1;   // 玩家当前位置
  Vector3 velocity = 2;   // 玩家当前速度
  bool is_in_air = 3;     // 玩家当前是否在空中
  // 之后可以在这里添加其他必要的状态信息 (例如：分数、生命值、场景物体状态等)
}

// 客户端到服务器通信的顶层消息封装
message ClientToServer {
  // 使用 'oneof' 可以在未来添加其他消息类型，同时保持向后兼容性
  oneof payload {
    PlayerInput input = 1; // 包含玩家输入信息
    // 例如: RequestRespawn respawn_request = 2; // 请求重生消息
  }
}

// 服务器到客户端通信的顶层消息封装
message ServerToClient {
  oneof payload {
    GameState state = 1; // 包含游戏状态信息
    // 例如: PlayerDiedEvent death_event = 2; // 玩家死亡事件
    // 例如: LevelCompleteEvent level_complete = 3; // 关卡完成事件
  }
}